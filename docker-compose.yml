networks:
  my_network:
    driver: bridge
services:
  # Kafka (Zookeeper 없이 KRaft 모드 실행)
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: controller,broker
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_LISTENERS: PLAINTEXT://kafka:9092,CONTROLLER://kafka:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      CLUSTER_ID: X_tpfbxmSoqw8cU-BYoVJA
      KAFKA_DELETE_TOPIC_ENABLE: "true"  # ✅ Kafka에서 토픽 삭제 허용
    networks:
      - my_network

#    volumes:
#      - kafka_data:/var/lib/kafka/data
  # Nginx (로드밸런서)
  nginx:
    image: nginx:latest
    container_name: nginx_server
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - springboot1
      - springboot2
    networks:
      - my_network

  # Spring Boot 서비스 1
  springboot1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: springboot1
    ports:
      - "8081:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - kafka
    networks:
      - my_network
  # Spring Boot 서비스 2
  springboot2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: springboot2
    ports:
      - "8082:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - kafka
    networks:
      - my_network
